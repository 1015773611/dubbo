
测试用例（samples-sd-transfer-provider）为在provider的xml添加如下
<dubbo:protocol name="dubbo" telnet="clear,exit,help,status,log"/> 

// ====================================================================
	1 连接建立 
// ====================================================================
telnet 127.0.0.1 20880

// ChannelActvie CSConnect详情见flow，不赘述

// ====================================================================
	2 TelnetHandlerAdapter   &  HelpTelnetHandler
// ====================================================================
dubbo>help

InternalDecoder decode(ChannelHandlerContext ctx, ByteBuf input, List<Object> out)
	// ....
	Object msg = codec.decode(channel, message);
		DubboCountCodec decode
			// ...
			Object obj = codec.decode(channel, buffer);
				ExchangeCodec decode
					int readable = buffer.readableBytes();
			        byte[] header = new byte[Math.min(readable, HEADER_LENGTH)];
			        buffer.readBytes(header);
			        return decode(channel, buffer, readable, header);
			        	if (readable > 0 && header[0] != MAGIC_HIGH
				                || readable > 1 && header[1] != MAGIC_LOW) {
				            // 不走
				            int length = header.length;
				            if (header.length < readable) {
				                header = Bytes.copyOf(header, readable);
				                buffer.readBytes(header, length, readable - length);
				            }
				            // 不走
				            for (int i = 1; i < header.length - 1; i++) {
				                if (header[i] == MAGIC_HIGH && header[i + 1] == MAGIC_LOW) {
				                    buffer.readerIndex(buffer.readerIndex() - header.length + i);
				                    header = Bytes.copyOf(header, i);
				                    break;
				                }
				            }

				            return super.decode(channel, buffer, readable, header);

				            	TelnetCodec decode(Channel channel, ChannelBuffer buffer, int readable, byte[] message)
				            		// 代码较长，不粘贴
				        }
				        // ....
			// ...
	// ....

编码完成后走 NettyServerHandler channelRead逻辑，在rpc模块看，这里不追溯，只描述telnet相关

HeaderExchangeHandler

	final ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);
    if (message instanceof Request) {
        // ...
    } else if (message instanceof Response) {
        // ...

    } else if (message instanceof String) {
        if (isClientSide(channel)) {
            Exception e = new Exception("Dubbo client can not supported string message: " + message + " in channel: " + channel + ", url: " + channel.getUrl());
            logger.error(e.getMessage(), e);
        } else {
            String echo = handler.telnet(channel, (String) message);
            	// 另换行 handler为RequestHandler，但是其间接继承了TelnetHandlerAdapter，会走到其telnet方法
            if (echo != null && echo.length() > 0) {
                channel.send(echo);
                 // 另换行 走编码逻辑
            }
        }
    } else {
    	// ....
    }


TelnetHandlerAdapter telnet(Channel channel, String message) // this为requestHandler
	// 暂时不粘贴了 看源码

// ====================================================================
InternalEncoder encode(ChannelHandlerContext ctx, Object msg, ByteBuf out) throws Exception {
        
        ChannelBuffer buffer = new NettyBackedChannelBuffer(out);
        Channel ch = ctx.channel();
        NettyChannel channel = NettyChannel.getOrAddChannel(ch, url, handler);
        
        codec.encode(channel, buffer, msg);
        	
        	DubboCountCodec
        		
        		codec.encode(channel, buffer, msg);
        			
        			ExchangeCodec encode(Channel channel, ChannelBuffer buffer, Object msg) throws IOException {
				        //....
				         else {
				            
				            super.encode(channel, buffer, msg);
				            	
				            	TelnetCodec encode
				            		if (message instanceof String) {
							            if (isClientSide(channel)) {
							                message = message + "\r\n";
							            }
							            byte[] msgData = ((String) message).getBytes(getCharset(channel).name());
							            buffer.writeBytes(msgData);
							        } else {
							            super.encode(channel, buffer, message);
							        }
				        }
				    }
    }


// ====================================================================

telnet展示 

dubbo>help 
Please input "help [command]" show detail.
 clear [lines]  - Clear screen.
 exit           - Exit the telnet.
 help [command] - Show help.
 status [-l]    - Show status.
 log level      - Change log level or show log


// ====================================================================
	3  StatusTelnetHandler
// ====================================================================

 dubbo>status -l
+----------+--------+----------------------------------------------------------+
| resource | status | message                                                  |
+----------+--------+----------------------------------------------------------+
| load     | OK     | load:3.234375,cpu:12                                     |
| memory   | OK     | max:3641M,total:204M,used:50M,free:154M                  |
| server   | OK     | /30.25.58.200:20881(clients:0),/30.25.58.200:20880(clients:1) |
| registry | OK     | 127.0.0.1:2181(connected),127.0.0.1:2181(connected)      |
| spring   | OK     | samples.sd.transfer/dubbo-provider.xml                   |
| summary  | OK     |                                                          |
+----------+--------+----------------------------------------------------------+

这段是走 StatusTelnetHandler 的逻辑 ，不截图代码了，会检查7个如下
checkers = {ArrayList@6283}  size = 7
 0 = {ThreadPoolStatusChecker@4491}  -- 
 1 = {DataSourceStatusChecker@4492} 
 2 = {LoadStatusChecker@4493} 
 3 = {MemoryStatusChecker@4494} 
 4 = {ServerStatusChecker@4495} 
 5 = {RegistryStatusChecker@4496} 	
 6 = {SpringStatusChecker@4497} 

 // ====================================================================
 	log、clear、exit比较简单，不说了
 // ====================================================================


// ====================================================================

新增这么几个，功能去看源码

dubbo>help
Please input "help [command]" show detail.
 clear [lines]                    - Clear screen.
 exit                             - Exit the telnet.
 help [command]                   - Show help.
 status [-l]                      - Show status.
 log level                        - Change log level or show log 

 ls [-l] [service]                - List services and methods.
 trace [service] [method] [times] - Trace the service.
 count [service] [method] [times] - Count the service.
 invoke [service.]method(args)    - Invoke the service method.
 select [index]                   - Select the index of the method you want to invoke.
 shutdown [-t <milliseconds>]     - Shutdown Dubbo Application.
 pwd                              - Print working default service.
 cd [service]                     - Change default service.
 ps [-l] [port]                   - Print server ports and connections.

ls ~ ps这之间的，需要在<dubbo:protocol name="dubbo" telnet="clear,exit,help,status,log"/> 配置，同时注意能加载到qos包，因为这几个telnet在qos下，比如我在config-spring测试的，则需要加上qos的依赖


