// ====================================================================
dubbo-samples-configcenter-multiprotocol
// ====================================================================
配置方式1

	String str = "#key: dubbo.{item-name}.{id}.{property}\n" +
            "dubbo.registry.address=zookeeper://" + zookeeperHost + ":2181\n" +
            "dubbo.protocols.dubbo1.name=dubbo\n" +
            "dubbo.protocols.dubbo1.port=20991\n" +
            "dubbo.protocols.dubbo2.name=dubbo\n" +
            "dubbo.protocols.dubbo2.port=20992";

    System.out.println(str);

    try {
        String path = "/dubbo/config/dubbo/dubbo.properties";
        if (client.checkExists().forPath(path) == null) {
            client.create().creatingParentsIfNeeded().forPath(path);
        }
        setData(path, str);
    } catch (Exception e) {
        e.printStackTrace();
    }

配置方式2
multi-protocols-config-center.properties
	dubbo.registry.address=zookeeper://127.0.0.1:2181
	dubbo.protocols.dubbo1.name=dubbo
	dubbo.protocols.dubbo1.port=20991
	dubbo.protocols.dubbo2.name=dubbo
	dubbo.protocols.dubbo2.port=20992

下面先讲述配置方式1的
// ====================================================================
configcenter-provider.xml
	<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
	       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
	       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	    <context:property-placeholder/>

	    <dubbo:application name="configcenter-multiprotocol-provider"/>

	    <dubbo:config-center address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

	    <bean id="demoService" class="org.apache.dubbo.samples.configcenter.impl.DemoServiceImpl"/>
	    
	    <dubbo:service protocol="dubbo1" // 这里可以配置多个值，比如"dubbo1,dubbo2" 且注意生成的beanId分别为 ...DemoService + 1 / 2
	                   interface="org.apache.dubbo.samples.configcenter.api.DemoService"
	                   ref="demoService"/>

	    <dubbo:service protocol="dubbo2"
	                   interface="org.apache.dubbo.samples.configcenter.api.DemoService"
	                   ref="demoService" group="groupA"/>

	</beans>
// ====================================================================
BasicProvider
	public static void main(String[] args) throws Exception {
        new EmbeddedZooKeeper(2181, false).start();
        ZKTools.generateDubboProperties();

        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("spring/configcenter-provider.xml");
        context.start();

        System.out.println("dubbo service started");
        new CountDownLatch(1).await();
    }
// ====================================================================

DubboBeanDefinitionParser parse
	
	ServiceBean parse // 第一个<dubbo:service
	// ...
	else if ("provider".equals(property) || "registry".equals(property) || ("protocol".equals(property) && 												AbstractServiceConfig.class.isAssignableFrom(beanClass))) {
	    beanDefinition.getPropertyValues().addPropertyValue(beanProperty + "Ids", value);
	    	// {"protocolIds","dubbo1"}
	}

	ServiceBean parse // 第二个<dubbo:service
	// ...
	else if ("provider".equals(property) || "registry".equals(property) || ("protocol".equals(property) && 												AbstractServiceConfig.class.isAssignableFrom(beanClass))) {
	    beanDefinition.getPropertyValues().addPropertyValue(beanProperty + "Ids", value);
	    	// {"protocolIds","dubbo2"}
	}

// ====================================================================
<dubbo:service /> 
	AbstractServiceConfig setProtocolIds(String protocolIds) { // dubbo1
        this.protocolIds = protocolIds;
    }

<dubbo:service /> 
	AbstractServiceConfig setProtocolIds(String protocolIds) { // dubbo2
        this.protocolIds = protocolIds;
    }

// ====================================================================

DubboBootstrap initialize
	// ...
	
	startConfigCenter();
		useRegistryAsConfigCenterIfNecessary();
			// 因为如下返回
			if (CollectionUtils.isNotEmpty(configManager.getConfigCenters())) {
	            return;
	        }
	        // ...

        Collection<ConfigCenterConfig> configCenters = configManager.getConfigCenters();

        if (CollectionUtils.isEmpty(configCenters)) {
            ConfigCenterConfig configCenterConfig = new ConfigCenterConfig();
            configCenterConfig.refresh();
            if (configCenterConfig.isValid()) {
                configManager.addConfigCenter(configCenterConfig);
                configCenters = configManager.getConfigCenters();
            }
        } else {
        	// 走这里
            for (ConfigCenterConfig configCenterConfig : configCenters) {
                
                configCenterConfig.refresh();
                	
                	AbstractConfig refresh
                		
                		Environment env = ApplicationModel.getEnvironment();
				        
				        CompositeConfiguration compositeConfiguration = env.getPrefixedConfiguration(this);
				        	
				        	CompositeConfiguration prefixedConfiguration = new CompositeConfiguration(config.getPrefix(), config.getId());
					        
					        Configuration configuration = new ConfigConfigurationAdapter(config);
					        	Map<String, String> configMetadata = config.getMetaData();
						        metaData = new HashMap<>(configMetadata.size(), 1.0f);
						        for (Map.Entry<String, String> entry : configMetadata.entrySet()) {
						            String prefix = config.getPrefix().endsWith(".") ? config.getPrefix() : config.getPrefix() + ".";
						            String id = StringUtils.isEmpty(config.getId()) ? "" : config.getId() + ".";
						            metaData.put(prefix + id + entry.getKey(), entry.getValue());
						        }
					        
					        if (this.isConfigCenterFirst()) { // 走这里
					            prefixedConfiguration.addConfiguration(systemConfiguration);
					            prefixedConfiguration.addConfiguration(environmentConfiguration);
					            prefixedConfiguration.addConfiguration(appExternalConfiguration);
					            prefixedConfiguration.addConfiguration(externalConfiguration);
					            	// 注意这个
					            prefixedConfiguration.addConfiguration(configuration);
					            prefixedConfiguration.addConfiguration(propertiesConfiguration);
					        } else {
					            prefixedConfiguration.addConfiguration(systemConfiguration);
					            prefixedConfiguration.addConfiguration(environmentConfiguration);
					            prefixedConfiguration.addConfiguration(configuration);
					            prefixedConfiguration.addConfiguration(appExternalConfiguration);
					            prefixedConfiguration.addConfiguration(externalConfiguration);
					            prefixedConfiguration.addConfiguration(propertiesConfiguration);
					        }
					        return prefixedConfiguration;
				       
				        // ..
                
                ConfigValidationUtils.validateConfigCenterConfig(configCenterConfig);
            }
        }
		if (CollectionUtils.isNotEmpty(configCenters)) {
	        
	        CompositeDynamicConfiguration compositeDynamicConfiguration = new CompositeDynamicConfiguration();
	        
	        for (ConfigCenterConfig configCenter : configCenters) {
	        	// 注意
	            compositeDynamicConfiguration.addConfiguration(prepareEnvironment(configCenter));
					
					prepareEnvironment
						
						DynamicConfiguration dynamicConfiguration = getDynamicConfiguration(configCenter.toUrl());
	           			String configContent = dynamicConfiguration.getProperties(configCenter.getConfigFile(), configCenter.getGroup()); // （前面配置方式1，所以能取到先前存到zk的值）
	           			
	           			// appContent 这里不展示，同上....

	           			environment.setConfigCenterFirst(configCenter.isHighestPriority());

		                environment.updateExternalConfigurationMap(parseProperties(configContent));
		                	
		                	parseProperties
			                	Map<String, String> map = new HashMap<>();
						        if (StringUtils.isEmpty(content)) {
						            logger.warn("You specified the config center, but there's not even one single config item in it.");
						        } else {
						            Properties properties = new Properties();
						            properties.load(new StringReader(content));
						            properties.stringPropertyNames().forEach(
						                    k -> map.put(k, properties.getProperty(k))
						            );
						        }
					        	return map;
		                	
		                	updateExternalConfigurationMap	（这是关键，后续会用到）
		                		this.externalConfigurationMap.putAll(externalMap);
		                		// "dubbo.registry.address" -> "zookeeper://127.0.0.1:2181"
					            // "dubbo.protocols.dubbo1.port" -> "20991"
					            // "dubbo.protocols.dubbo2.port" -> "20992"
					            // "dubbo.protocols.dubbo1.name" -> "dubbo"
					            // "dubbo.protocols.dubbo2.name" -> "dubbo"

		                environment.updateAppExternalConfigurationMap(parseProperties(appConfigContent));
	        }
	        environment.setDynamicConfiguration(compositeDynamicConfiguration);
	    }
	    configManager.refreshAll();
					
	loadRemoteConfigs();
		
		List<RegistryConfig> tmpRegistries = new ArrayList<>();
        
        Set<String> registryIds = configManager.getRegistryIds();
        	Set<String> registryIds = new HashSet<>();
	        
	        registryIds.addAll(getSubProperties(ApplicationModel.getEnvironment().getExternalConfigurationMap(),
	                REGISTRIES_SUFFIX));
	                	
	                	return properties.keySet().stream().filter(k -> k.contains(prefix)).map(k -> {
				            k = k.substring(prefix.length());
				            return k.substring(0, k.indexOf("."));
				        }).collect(Collectors.toSet());
	        
	        registryIds.addAll(getSubProperties(ApplicationModel.getEnvironment().getAppExternalConfigurationMap(),
	                REGISTRIES_SUFFIX));

	        return unmodifiableSet(registryIds);
	        // registryIds 在该场景下为空
        
        registryIds.forEach(id -> {
            if (tmpRegistries.stream().noneMatch(reg -> reg.getId().equals(id))) {
                tmpRegistries.add(configManager.getRegistry(id).orElseGet(() -> {
                    RegistryConfig registryConfig = new RegistryConfig();
                    registryConfig.setId(id);
                    registryConfig.refresh();
                    return registryConfig;
                }));
            }
        });

        configManager.addRegistries(tmpRegistries);	

        // ====================================================================
        
        List<ProtocolConfig> tmpProtocols = new ArrayList<>();
        Set<String> protocolIds = configManager.getProtocolIds();
        	Set<String> protocolIds = new HashSet<>();
	        protocolIds.addAll(getSubProperties(ApplicationModel.getEnvironment()
	                .getExternalConfigurationMap(), PROTOCOLS_SUFFIX));
	                	// protocolIds = {HashSet@4940}  size = 2
						//  0 = "dubbo1"
						//  1 = "dubbo2"
	        protocolIds.addAll(getSubProperties(ApplicationModel.getEnvironment()
	                .getAppExternalConfigurationMap(), PROTOCOLS_SUFFIX));
	                	// 无
	        return unmodifiableSet(protocolIds);
        
        protocolIds.forEach(id -> {
            if (tmpProtocols.stream().noneMatch(prot -> prot.getId().equals(id))) {
                tmpProtocols.add(configManager.getProtocol(id).orElseGet(() -> {
                    ProtocolConfig protocolConfig = new ProtocolConfig();
                    protocolConfig.setId(id);
                    protocolConfig.refresh(); // 注意
                    	if (StringUtils.isEmpty(this.getName())) {
				            this.setName(DUBBO_VERSION_KEY); // 默认name设置为dubbo
				        }
				        super.refresh();

				        	CompositeConfiguration prefixedConfiguration = new CompositeConfiguration(config.getPrefix(), config.getId()); 
				        		
				        		config.getPrefix()
				        			StringUtils.isNotEmpty(prefix) ? prefix : (CommonConstants.DUBBO + "." + getTagName(this.getClass())) //  dubbo.protocol.
				        		
				        		config.getId()
				        			// dubbo1	


				        		new CompositeConfiguration
							        if (this.isConfigCenterFirst()) {
							            prefixedConfiguration.addConfiguration(systemConfiguration);
							            prefixedConfiguration.addConfiguration(environmentConfiguration);
							            prefixedConfiguration.addConfiguration(appExternalConfiguration);
							            prefixedConfiguration.addConfiguration(externalConfiguration);
							            	// externalConfiguration 封装了zk的信息（前面调用了updateExternalConfigurationMap）
												 "dubbo.registry.address" -> "zookeeper://127.0.0.1:2181"
												 "dubbo.protocols.dubbo1.name" -> "dubbo"
												 "dubbo.protocols.dubbo1.port" -> "20991"
												 "dubbo.protocols.dubbo2.name" -> "dubbo"
												 "dubbo.protocols.dubbo2.port" -> "20992"
												 
							            prefixedConfiguration.addConfiguration(configuration);
							            prefixedConfiguration.addConfiguration(propertiesConfiguration);
							        }
					        Configuration configuration = new ConfigConfigurationAdapter(config);

					        Method[] methods = getClass().getMethods();
				            for (Method method : methods) {
				                if (MethodUtils.isSetter(method)) {
				                    try {
				                        String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));
				                        	// ...
				                        	CompositeConfiguration getProperty
				                        		if (StringUtils.isNotEmpty(prefix)) {
										            if (StringUtils.isNotEmpty(id)) {
										                value = getInternalProperty(prefix + id + "." + key); 
										                 // key = dubbo.protocol.dubbo1.port
										                 // 从externalConfiguration取到数据
				                        	// ...
				                        if (StringUtils.isNotEmpty(value) && ClassUtils.isTypeMatch(method.getParameterTypes()[0], value)) {
				                            method.invoke(this, ClassUtils.convertPrimitive(method.getParameterTypes()[0], value));
				                        }
				                        // ..
					        
				        if (StringUtils.isNotEmpty(this.getId())) {
				            this.setPrefix(PROTOCOLS_SUFFIX);
				            super.refresh();
				        }
                    return protocolConfig;
                }));
            }
        });

        configManager.addProtocols(tmpProtocols);
        
	// ...

DubboBootstrap start
if (started.compareAndSet(false, true)) {
    ready.set(false);
    initialize();
    	// 看前面
    if (logger.isInfoEnabled()) {
        logger.info(NAME + " is starting...");
    }
    exportServices();
    	
    	configManager.getServices().forEach(sc -> {
            
            ServiceConfig serviceConfig = (ServiceConfig) sc;
            serviceConfig.setBootstrap(this);

            if (exportAsync) {
                // ....
            } else {
                sc.export();	
                	if (bootstrap == null) {
			            bootstrap = DubboBootstrap.getInstance();
			            bootstrap.initialize();
			        }
			        // 注意
			        checkAndUpdateSubConfigs();
			        	completeCompoundConfigs();
				        checkDefault();
				        checkProtocol();
				        	if (provider != null && notHasSelfProtocolProperty()) {
					            setProtocols(provider.getProtocols());
					            setProtocolIds(provider.getProtocolIds());
					        }

					        if (CollectionUtils.isEmpty(protocols) && provider != null) {
					            setProtocols(provider.getProtocols());
					        }
					        convertProtocolIdsToProtocols();
					        	if (StringUtils.isEmpty(protocolIds)) {
						            if (CollectionUtils.isEmpty(protocols)) {
						                // ...
						            }
						        } else {
						        	// 进这个分支(protocolIds的赋值见最前面 setProtocolIds 方法的调用点)
						            String[] arr = COMMA_SPLIT_PATTERN.split(protocolIds);
						            List<ProtocolConfig> tmpProtocols = new ArrayList<>();
						            Arrays.stream(arr).forEach(id -> {
						                if (tmpProtocols.stream().noneMatch(prot -> prot.getId().equals(id))) {
						                    Optional<ProtocolConfig> globalProtocol = ApplicationModel.getConfigManager().getProtocol(id);
						                    if (globalProtocol.isPresent()) {
						                    	// 进这个分支，塞入ConfigManager的逻辑见前面
						                        tmpProtocols.add(globalProtocol.get());
						                    } else {
						                        ProtocolConfig protocolConfig = new ProtocolConfig();
						                        protocolConfig.setId(id);
						                        protocolConfig.refresh();
						                        tmpProtocols.add(protocolConfig);
						                    }
						                }
						            });
						            if (tmpProtocols.size() > arr.length) {
						                throw new IllegalStateException("Too much protocols found, );
						            }
						            // 关键，塞入List属性，后续会用到
						            setProtocols(tmpProtocols);
						            	AbstractServiceConfig setProtocols
						            		this.protocols = (List<ProtocolConfig>) protocols;
						        }
				        // ...
			        
			        // ...

			        if (shouldDelay()) {
			            DELAY_EXPORT_EXECUTOR.schedule(this::doExport, getDelay(), TimeUnit.MILLISECONDS);
			        } else {
			            doExport();
			            	if (unexported) {
					            throw new IllegalStateException("The service ");
					        }
					        if (exported) {
					            return;
					        }
					        exported = true;

					        if (StringUtils.isEmpty(path)) {
					            path = interfaceName;
					        }
					        doExportUrls();
					        	//...
					        	for (ProtocolConfig protocolConfig : protocols) {
						        	// 这里的Protocols长度还是1，属性如下。所谓的多协议是可以配置多个protocol信息，但是service在xml配置可以指定多个，只是我们的案例仅填充了一个值
									// name = "dubbo"
									// port = {Integer@4035} 20992
									// id = "dubbo2"
									// prefix = "dubbo.protocols."
								// 后续逻辑不赘述
					        bootstrap.setReady(true);
			        }
			        
			        exported();

                exportedServices.add(sc);
            }
        });

    // ...


下面讲述配置方式2的
// ====================================================================
看下DubboProperties-flow就知道了




// ====================================================================

BasicConsumer
public static void main(String[] args) {
    ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext("samples.multiprotocol/configcenter-consumer.xml");
    context.start();

    DemoService demoService = (DemoService) context.getBean("demoService");

    String hello = demoService.sayHello("world");
    System.out.println(hello);
}
// ====================================================================
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:property-placeholder/>

    <dubbo:application name="configcenter-multiprotocol-consumer"/>

    <dubbo:config-center address="zookeeper://${zookeeper.address:127.0.0.1}:2181"/>

    <dubbo:reference id="demoService" protocol="dubbo" // 注意
                     interface="samples.multiprotocol.api.DemoService"/>

</beans>

// ====================================================================

ReferenceConfigBase 
	setProtocol(String protocol) 
    	this.protocol = protocol; // dubbo

ReferenceConfig
	// ...
	createProxy(Map<String, String> map)
		// 根据自适应扩展走DubboProtocol的逻辑，用什么协议感觉无所谓啊，还是能获取到提供者的地址，因为注册中心不变，而且也能发起远程调用，
		// 所以说消费者使用的protocol的port没啥意义
		invoker = REF_PROTOCOL.refer(interfaceClass, urls.get(0));

	// ...

