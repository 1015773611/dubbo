public static void main(String[] args) throws Exception {
    ServiceConfig<GreetingsService> service = new ServiceConfig<>();
    
    service.setApplication(new ApplicationConfig("first-dubbo-provider"));
        
        ApplicationConfig(String name) {
            setName(name);
                this.name = name;
                if (StringUtils.isEmpty(id)) {
                    id = name;
                }
        
        AbstractInterfaceConfig setApplication
            this.application = application;
            if (application != null) {
                ConfigManager configManager = ApplicationModel.getConfigManager();
                configManager.getApplication().orElseGet(() -> {
                    configManager.setApplication(application);
                    return application;
                });
            }
    
    service.setRegistry(new RegistryConfig(
            "zookeeper://" + zookeeperHost + ":" + zookeeperPort));
        
        RegistryConfig(String address) {
            
            setAddress(address);
                this.address = address;
                URL url = URL.valueOf(address);
                updatePropertyIfAbsent(this::getUsername, this::setUsername, url.getUsername());
                updatePropertyIfAbsent(this::getPassword, this::setPassword, url.getPassword());
                updatePropertyIfAbsent(this::getProtocol, this::setProtocol, url.getProtocol());
                updatePropertyIfAbsent(this::getPort, this::setPort, url.getPort());
                Map<String, String> params = url.getParameters();
                if (CollectionUtils.isNotEmptyMap(params)) {
                    params.remove(BACKUP_KEY);
                }
                updateParameters(params);
        
        AbstractInterfaceConfig setRegistry
            List<RegistryConfig> registries = new ArrayList<RegistryConfig>(1);
            registries.add(registry);
            setRegistries(registries);
            
            AbstractInterfaceConfig setRegistries(List<? extends RegistryConfig> registries)
                this.registries = (List<RegistryConfig>) registries;
    
    service.setInterface(GreetingsService.class);
        
        ServiceConfigBase setInterface(Class<?> interfaceClass) {
            if (interfaceClass != null && !interfaceClass.isInterface()) {
                throw new IllegalStateException("The interface class " + interfaceClass + " is not a interface!");
            }
            this.interfaceClass = interfaceClass;
            setInterface(interfaceClass == null ? null : interfaceClass.getName());
                    AbstractInterfaceConfig setInterface(String interfaceName) 
                        this.interfaceName = interfaceName;
    service.setRef(new GreetingsServiceImpl());
        ServiceConfigBase setRef(T ref)
            this.ref = ref;
    service.export();
        // 省略 

    System.out.println("dubbo service started");
    new CountDownLatch(1).await();
}